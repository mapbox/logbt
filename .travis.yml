language: generic

addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test']
    packages: [ 'gdb','libstdc++-5-dev']

matrix:
  include:
    - os: linux
      sudo: required
      dist: precise
    - os: linux
      sudo: required
      dist: trusty
    - os: osx

install:
  # install node in a way that ensures node will be on PATH for sudo and sudoless usage
  # disable node that may be already enabled via nvm
  - nvm unload || true
  - platform=$(uname -s | tr '[:upper:]' '[:lower:]')
  - NODE_SLUG=node-v$(cat .nvmrc)-${platform}-x64
  - curl -sL --retry 3 -O https://nodejs.org/dist/v$(cat .nvmrc)/${NODE_SLUG}.tar.gz
  - sudo tar xzf ${NODE_SLUG}.tar.gz --strip-components=1 -C /usr/local
  - export PATH=/usr/local/bin:${PATH}
  - /usr/local/bin/node --version
  - which node
  - node --version
  - npm --version

script:
  # logbt should work as both root and as a non root user (as long as the corefile location is set beforehand as sudo)
  - |
    if [[ $(uname -s) == 'Darwin' ]]; then
        # first test sudoless
        sudo sysctl kern.corefile=/tmp/logbt-coredumps/core.%P
        echo "running test sudoless"
        ./test/unit.sh
        # now set the kernfile to something wrong to ensure that
        # the next run as sudo will fix and work
        echo ""
        echo "running tests again as sudo"
        sudo sysctl kern.corefile=dummy
        # now run tests as sudo
        sudo ./test/unit.sh
    else
        # first test sudoless
        sudo bash -c 'echo "/tmp/logbt-coredumps/core.%p" > /proc/sys/kernel/core_pattern'
        echo "running test sudoless"
        ./test/unit.sh
        # now set the kernfile to something wrong to ensure that
        # the next run as sudo will fix and work
        echo ""
        echo "running tests again as sudo"
        sudo bash -c 'echo "dummy" > /proc/sys/kernel/core_pattern'
        # now run tests as sudo
        sudo ./test/unit.sh
    fi